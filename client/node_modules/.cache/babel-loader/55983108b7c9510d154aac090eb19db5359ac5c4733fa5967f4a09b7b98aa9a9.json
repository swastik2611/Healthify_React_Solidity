{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { ContractExecutionError, InvalidResponseError, SignatureError, TransactionRevertedWithoutReasonError, TransactionRevertInstructionError, TransactionRevertWithCustomError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, transactionInfoSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './utils/get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { watchTransactionForConfirmations } from './utils/watch_transaction_for_confirmations.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './utils/get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './utils/get_revert_reason.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getSyncing(web3Context.requestManager);\n});\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getMining(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getHashRate(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBalance(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getStorageAt(web3Context, address, storageSlot) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = format({\n      format: 'uint'\n    }, storageSlot, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getCode(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let hydrated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    return format(blockSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockTransactionCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockUncleCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getUncle(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let uncleIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = format({\n      format: 'uint'\n    }, uncleIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return format(blockSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransaction(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      transactionSchema: transactionInfoSchema\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => formatTransaction(transaction, returnFormat));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionFromBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let transactionIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = format({\n      format: 'uint'\n    }, transactionIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      transactionSchema: transactionInfoSchema\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionCount(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction(web3Context, transaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n          from: getTransactionFromOrToAttr('from', web3Context, transaction),\n          to: getTransactionFromOrToAttr('to', web3Context, transaction)\n        }), ETH_DATA_FORMAT);\n        if (!(options === null || options === void 0 ? void 0 : options.ignoreGasPricing) && isNullish(transactionFormatted.gasPrice) && (isNullish(transaction.maxPriorityFeePerGas) || isNullish(transaction.maxFeePerGas))) {\n          transactionFormatted = Object.assign(Object.assign({}, transactionFormatted), yield getTransactionGasPricing(transactionFormatted, web3Context, ETH_DATA_FORMAT));\n        }\n        try {\n          if (options.checkRevertBeforeSending !== false) {\n            const reason = yield getRevertReason(web3Context, transactionFormatted, options.contractAbi);\n            if (reason !== undefined) {\n              const error = yield getTransactionError(web3Context, transactionFormatted, undefined, undefined, options.contractAbi, reason);\n              if (promiEvent.listenerCount('error') > 0) {\n                promiEvent.emit('error', error);\n              }\n              reject(error);\n              return;\n            }\n          }\n          if (promiEvent.listenerCount('sending') > 0) {\n            promiEvent.emit('sending', transactionFormatted);\n          }\n          let transactionHash;\n          let wallet;\n          if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          if (wallet) {\n            const signedTransaction = yield wallet.signTransaction(transactionFormatted);\n            transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n              return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransaction.rawTransaction);\n            }), signedTransaction.transactionHash);\n          } else {\n            transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n              return ethRpcMethods.sendTransaction(web3Context.requestManager, transactionFormatted);\n            }));\n          }\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          if (promiEvent.listenerCount('sent') > 0) {\n            promiEvent.emit('sent', transactionFormatted);\n          }\n          if (promiEvent.listenerCount('transactionHash') > 0) {\n            promiEvent.emit('transactionHash', transactionHashFormatted);\n          }\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = format(transactionReceiptSchema, transactionReceipt, returnFormat);\n          if (promiEvent.listenerCount('receipt') > 0) {\n            promiEvent.emit('receipt', transactionReceiptFormatted);\n          }\n          if (options === null || options === void 0 ? void 0 : options.transactionResolver) {\n            resolve(options === null || options === void 0 ? void 0 : options.transactionResolver(transactionReceiptFormatted));\n          } else if (transactionReceipt.status === BigInt(0)) {\n            const error = yield getTransactionError(web3Context, transactionFormatted, transactionReceiptFormatted, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n            if (promiEvent.listenerCount('error') > 0) {\n              promiEvent.emit('error', error);\n            }\n            reject(error);\n          } else {\n            resolve(transactionReceiptFormatted);\n          }\n          if (promiEvent.listenerCount('confirmation') > 0) {\n            watchTransactionForConfirmations(web3Context, promiEvent, transactionReceiptFormatted, transactionHash, returnFormat);\n          }\n        } catch (error) {\n          let _error = error;\n          if (_error instanceof ContractExecutionError && web3Context.handleRevert) {\n            _error = yield getTransactionError(web3Context, transactionFormatted, undefined, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n          }\n          if ((_error instanceof InvalidResponseError || _error instanceof ContractExecutionError || _error instanceof TransactionRevertWithCustomError || _error instanceof TransactionRevertedWithoutReasonError || _error instanceof TransactionRevertInstructionError) && promiEvent.listenerCount('error') > 0) {\n            promiEvent.emit('error', _error);\n          }\n          reject(_error);\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = format({\n          format: 'bytes'\n        }, signedTransaction, ETH_DATA_FORMAT);\n        const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          if (options.checkRevertBeforeSending !== false) {\n            const reason = yield getRevertReason(web3Context, unSerializedTransactionWithFrom, options.contractAbi);\n            if (reason !== undefined) {\n              const error = yield getTransactionError(web3Context, unSerializedTransactionWithFrom, undefined, undefined, options.contractAbi, reason);\n              if (promiEvent.listenerCount('error') > 0) {\n                promiEvent.emit('error', error);\n              }\n              reject(error);\n              return;\n            }\n          }\n          if (promiEvent.listenerCount('sending') > 0) {\n            promiEvent.emit('sending', signedTransactionFormattedHex);\n          }\n          const transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          if (promiEvent.listenerCount('sent') > 0) {\n            promiEvent.emit('sent', signedTransactionFormattedHex);\n          }\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          if (promiEvent.listenerCount('transactionHash') > 0) {\n            promiEvent.emit('transactionHash', transactionHashFormatted);\n          }\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = format(transactionReceiptSchema, transactionReceipt, returnFormat);\n          if (promiEvent.listenerCount('receipt') > 0) {\n            promiEvent.emit('receipt', transactionReceiptFormatted);\n          }\n          if (options === null || options === void 0 ? void 0 : options.transactionResolver) {\n            resolve(options === null || options === void 0 ? void 0 : options.transactionResolver(transactionReceiptFormatted));\n          } else if (transactionReceipt.status === BigInt(0)) {\n            const error = yield getTransactionError(web3Context, unSerializedTransactionWithFrom, transactionReceiptFormatted, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n            if (promiEvent.listenerCount('error') > 0) {\n              promiEvent.emit('error', error);\n            }\n            reject(error);\n          } else {\n            resolve(transactionReceiptFormatted);\n          }\n          if (promiEvent.listenerCount('confirmation') > 0) {\n            watchTransactionForConfirmations(web3Context, promiEvent, transactionReceiptFormatted, transactionHash, returnFormat);\n          }\n        } catch (error) {\n          let _error = error;\n          if (_error instanceof ContractExecutionError && web3Context.handleRevert) {\n            _error = yield getTransactionError(web3Context, unSerializedTransactionWithFrom, undefined, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n          }\n          if ((_error instanceof InvalidResponseError || _error instanceof ContractExecutionError || _error instanceof TransactionRevertWithCustomError || _error instanceof TransactionRevertedWithoutReasonError || _error instanceof TransactionRevertInstructionError) && promiEvent.listenerCount('error') > 0) {\n            promiEvent.emit('error', _error);\n          }\n          reject(_error);\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sign(web3Context, message, addressOrIndex, returnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = format({\n      format: 'bytes'\n    }, message, DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return format(SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTransaction(web3Context, transaction, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return isString(response) ? decodeSignedTransaction(response, returnFormat) : {\n      raw: format({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: formatTransaction(response.tx, returnFormat)\n    };\n  });\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function call(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function estimateGas(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getLogs(web3Context.requestManager, filter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getChainId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getProof(web3Context, address, storageKeys) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => format({\n      format: 'bytes'\n    }, storageKey, ETH_DATA_FORMAT));\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return format(accountSchema, response, returnFormat);\n  });\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getFeeHistory(web3Context, blockCount) {\n  let newestBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let rewardPercentiles = arguments.length > 3 ? arguments[3] : undefined;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = format({\n      format: 'uint'\n    }, blockCount, ETH_DATA_FORMAT);\n    const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n      format: 'uint'\n    }, newestBlock, ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = format({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, NUMBER_DATA_FORMAT);\n    const response = yield ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return format(feeHistorySchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function createAccessList(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format(accessListResultSchema, response, returnFormat);\n  });\n}","map":{"version":3,"names":["ETH_DATA_FORMAT","DEFAULT_RETURN_FORMAT","Web3PromiEvent","format","hexToBytes","bytesToUint8Array","TransactionFactory","isBlockTag","isBytes","isNullish","isString","ContractExecutionError","InvalidResponseError","SignatureError","TransactionRevertedWithoutReasonError","TransactionRevertInstructionError","TransactionRevertWithCustomError","ethRpcMethods","decodeSignedTransaction","accountSchema","blockSchema","feeHistorySchema","logSchema","transactionReceiptSchema","transactionInfoSchema","accessListResultSchema","SignatureObjectSchema","getTransactionFromOrToAttr","formatTransaction","getTransactionGasPricing","trySendTransaction","waitForTransactionReceipt","watchTransactionForConfirmations","NUMBER_DATA_FORMAT","getTransactionError","getRevertReason","getProtocolVersion","web3Context","__awaiter","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","getGasPrice","getBlockNumber","getBalance","address","blockNumber","arguments","length","undefined","defaultBlock","blockNumberFormatted","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","blockHashFormatted","getBlockByHash","getBlockByNumber","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","getTransactionByHash","transactionSchema","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getTransactionCount","sendTransaction","options","checkRevertBeforeSending","promiEvent","resolve","reject","setImmediate","transactionFormatted","Object","assign","from","to","ignoreGasPricing","gasPrice","maxPriorityFeePerGas","maxFeePerGas","reason","contractAbi","error","listenerCount","emit","wallet","get","signedTransaction","signTransaction","sendRawTransaction","rawTransaction","transactionReceipt","transactionReceiptFormatted","transactionResolver","status","BigInt","_error","handleRevert","sendSignedTransaction","signedTransactionFormattedHex","unSerializedTransaction","fromSerializedData","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","sign","message","addressOrIndex","messageFormatted","_a","signed","raw","tx","call","estimateGas","getLogs","filter","result","res","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","createAccessList"],"sources":["/Users/swastik2611/Documents/Healthify_React_Solidity/client/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tTransactionWithSenderAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tSignatureError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n} from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\ttransactionInfoSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './utils/get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { watchTransactionForConfirmations } from './utils/watch_transaction_for_confirmations.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './utils/get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './utils/get_revert_reason.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { transactionSchema: transactionInfoSchema });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(transaction as unknown as Transaction, returnFormat),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { transactionSchema: transactionInfoSchema });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tlet transactionFormatted = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!options?.ignoreGasPricing &&\n\t\t\t\t\t\tisNullish(transactionFormatted.gasPrice) &&\n\t\t\t\t\t\t(isNullish(transaction.maxPriorityFeePerGas) ||\n\t\t\t\t\t\t\tisNullish(transaction.maxFeePerGas))\n\t\t\t\t\t) {\n\t\t\t\t\t\ttransactionFormatted = {\n\t\t\t\t\t\t\t...transactionFormatted,\n\t\t\t\t\t\t\t// TODO gasPrice, maxPriorityFeePerGas, maxFeePerGas\n\t\t\t\t\t\t\t// should not be included if undefined, but currently are\n\t\t\t\t\t\t\t...(await getTransactionGasPricing(\n\t\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t\t\t)),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (options.checkRevertBeforeSending !== false) {\n\t\t\t\t\t\t\tconst reason = await getRevertReason(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (reason !== undefined) {\n\t\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t\t\treason,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sending') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sending', transactionFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet transactionHash: HexString;\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(transactionFormatted.from);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (wallet) {\n\t\t\t\t\t\t\tconst signedTransaction = await wallet.signTransaction(\n\t\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\ttransactionHash = await trySendTransaction(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\t\tsignedTransaction.rawTransaction,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tsignedTransaction.transactionHash,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttransactionHash = await trySendTransaction(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\t\tethRpcMethods.sendTransaction(\n\t\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\t\ttransactionFormatted as Partial<TransactionWithSenderAPI>,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sent') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sent', transactionFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('transactionHash', transactionHashFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = format(\n\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('receipt') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('receipt', transactionReceiptFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options?.transactionResolver) {\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\toptions?.transactionResolver(\n\t\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\t) as unknown as ResolveType,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (transactionReceipt.status === BigInt(0)) {\n\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(transactionReceiptFormatted as unknown as ResolveType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('confirmation') > 0) {\n\t\t\t\t\t\t\twatchTransactionForConfirmations<\n\t\t\t\t\t\t\t\tReturnFormat,\n\t\t\t\t\t\t\t\tSendTransactionEvents<ReturnFormat>,\n\t\t\t\t\t\t\t\tResolveType\n\t\t\t\t\t\t\t>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted as TransactionReceipt,\n\t\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlet _error = error;\n\n\t\t\t\t\t\tif (_error instanceof ContractExecutionError && web3Context.handleRevert) {\n\t\t\t\t\t\t\t_error = await getTransactionError(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertInstructionError) &&\n\t\t\t\t\t\t\tpromiEvent.listenerCount('error') > 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tpromiEvent.emit('error', _error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treject(_error);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (options.checkRevertBeforeSending !== false) {\n\t\t\t\t\t\t\tconst reason = await getRevertReason(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (reason !== undefined) {\n\t\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t\t\treason,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sending') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sending', signedTransactionFormattedHex);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sent') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sent', signedTransactionFormattedHex);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('transactionHash', transactionHashFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = format(\n\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('receipt') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('receipt', transactionReceiptFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options?.transactionResolver) {\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\toptions?.transactionResolver(\n\t\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\t) as unknown as ResolveType,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (transactionReceipt.status === BigInt(0)) {\n\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(transactionReceiptFormatted as unknown as ResolveType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('confirmation') > 0) {\n\t\t\t\t\t\t\twatchTransactionForConfirmations<\n\t\t\t\t\t\t\t\tReturnFormat,\n\t\t\t\t\t\t\t\tSendSignedTransactionEvents<ReturnFormat>,\n\t\t\t\t\t\t\t\tResolveType\n\t\t\t\t\t\t\t>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted as TransactionReceipt,\n\t\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlet _error = error;\n\n\t\t\t\t\t\tif (_error instanceof ContractExecutionError && web3Context.handleRevert) {\n\t\t\t\t\t\t\t_error = await getTransactionError(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertInstructionError) &&\n\t\t\t\t\t\t\tpromiEvent.listenerCount('error') > 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tpromiEvent.emit('error', _error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treject(_error);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat)\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, filter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(logSchema, res as unknown as Log, returnFormat);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(accountSchema, response as unknown as AccountObject, returnFormat);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(feeHistorySchema, response as unknown as FeeHistory, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(accessListResultSchema, response, returnFormat);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}