{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { parseBaseType, hexToNumber } from '../utils.js';\nimport { isHexStrict } from './string.js';\n/**\n * Checks if a given value is a valid big int\n */\nexport const isBigInt = value => typeof value === 'bigint';\nexport const isUInt = function (value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    abiType: 'uint'\n  };\n  if (!['number', 'string', 'bigint'].includes(typeof value) || typeof value === 'string' && value.length === 0) {\n    return false;\n  }\n  let size;\n  if (options === null || options === void 0 ? void 0 : options.abiType) {\n    const {\n      baseTypeSize\n    } = parseBaseType(options.abiType);\n    if (baseTypeSize) {\n      size = baseTypeSize;\n    }\n  } else if (options.bitSize) {\n    size = options.bitSize;\n  }\n  const maxSize = BigInt(2) ** BigInt(size !== null && size !== void 0 ? size : 256) - BigInt(1);\n  try {\n    const valueToCheck = typeof value === 'string' && isHexStrict(value) ? BigInt(hexToNumber(value)) : BigInt(value);\n    return valueToCheck >= 0 && valueToCheck <= maxSize;\n  } catch (error) {\n    // Some invalid number value given which can not be converted via BigInt\n    return false;\n  }\n};\nexport const isInt = function (value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    abiType: 'int'\n  };\n  if (!['number', 'string', 'bigint'].includes(typeof value)) {\n    return false;\n  }\n  if (typeof value === 'number' && value > Number.MAX_SAFE_INTEGER) {\n    return false;\n  }\n  let size;\n  if (options === null || options === void 0 ? void 0 : options.abiType) {\n    const {\n      baseTypeSize,\n      baseType\n    } = parseBaseType(options.abiType);\n    if (baseType !== 'int') {\n      return false;\n    }\n    if (baseTypeSize) {\n      size = baseTypeSize;\n    }\n  } else if (options.bitSize) {\n    size = options.bitSize;\n  }\n  const maxSize = BigInt(2) ** BigInt((size !== null && size !== void 0 ? size : 256) - 1);\n  const minSize = BigInt(-1) * BigInt(2) ** BigInt((size !== null && size !== void 0 ? size : 256) - 1);\n  try {\n    const valueToCheck = typeof value === 'string' && isHexStrict(value) ? BigInt(hexToNumber(value)) : BigInt(value);\n    return valueToCheck >= minSize && valueToCheck <= maxSize;\n  } catch (error) {\n    // Some invalid number value given which can not be converted via BigInt\n    return false;\n  }\n};\nexport const isNumber = value => {\n  if (isInt(value)) {\n    return true;\n  }\n  // It would be a decimal number\n  if (typeof value === 'string' && /[0-9.]/.test(value) && value.indexOf('.') === value.lastIndexOf('.')) {\n    return true;\n  }\n  if (typeof value === 'number') {\n    return true;\n  }\n  return false;\n};","map":{"version":3,"names":["parseBaseType","hexToNumber","isHexStrict","isBigInt","value","isUInt","options","arguments","length","undefined","abiType","includes","size","baseTypeSize","bitSize","maxSize","BigInt","valueToCheck","error","isInt","Number","MAX_SAFE_INTEGER","baseType","minSize","isNumber","test","indexOf","lastIndexOf"],"sources":["/Users/swastik2611/Documents/Healthify_React_Solidity/client/node_modules/web3-validator/src/validation/numbers.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ValidInputTypes } from '../types.js';\nimport { parseBaseType, hexToNumber } from '../utils.js';\nimport { isHexStrict } from './string.js';\n\n/**\n * Checks if a given value is a valid big int\n */\nexport const isBigInt = (value: ValidInputTypes): boolean => typeof value === 'bigint';\n\nexport const isUInt = (\n\tvalue: ValidInputTypes,\n\toptions: { abiType: string; bitSize?: never } | { bitSize: number; abiType?: never } = {\n\t\tabiType: 'uint',\n\t},\n) => {\n\tif (\n\t\t!['number', 'string', 'bigint'].includes(typeof value) ||\n\t\t(typeof value === 'string' && value.length === 0)\n\t) {\n\t\treturn false;\n\t}\n\n\tlet size!: number;\n\n\tif (options?.abiType) {\n\t\tconst { baseTypeSize } = parseBaseType(options.abiType);\n\n\t\tif (baseTypeSize) {\n\t\t\tsize = baseTypeSize;\n\t\t}\n\t} else if (options.bitSize) {\n\t\tsize = options.bitSize;\n\t}\n\n\tconst maxSize = BigInt(2) ** BigInt(size ?? 256) - BigInt(1);\n\n\ttry {\n\t\tconst valueToCheck =\n\t\t\ttypeof value === 'string' && isHexStrict(value)\n\t\t\t\t? BigInt(hexToNumber(value))\n\t\t\t\t: BigInt(value as number);\n\n\t\treturn valueToCheck >= 0 && valueToCheck <= maxSize;\n\t} catch (error) {\n\t\t// Some invalid number value given which can not be converted via BigInt\n\t\treturn false;\n\t}\n};\n\nexport const isInt = (\n\tvalue: ValidInputTypes,\n\toptions: { abiType: string; bitSize?: never } | { bitSize: number; abiType?: never } = {\n\t\tabiType: 'int',\n\t},\n) => {\n\tif (!['number', 'string', 'bigint'].includes(typeof value)) {\n\t\treturn false;\n\t}\n\n\tif (typeof value === 'number' && value > Number.MAX_SAFE_INTEGER) {\n\t\treturn false;\n\t}\n\n\tlet size!: number;\n\n\tif (options?.abiType) {\n\t\tconst { baseTypeSize, baseType } = parseBaseType(options.abiType);\n\n\t\tif (baseType !== 'int') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (baseTypeSize) {\n\t\t\tsize = baseTypeSize;\n\t\t}\n\t} else if (options.bitSize) {\n\t\tsize = options.bitSize;\n\t}\n\n\tconst maxSize = BigInt(2) ** BigInt((size ?? 256) - 1);\n\tconst minSize = BigInt(-1) * BigInt(2) ** BigInt((size ?? 256) - 1);\n\n\ttry {\n\t\tconst valueToCheck =\n\t\t\ttypeof value === 'string' && isHexStrict(value)\n\t\t\t\t? BigInt(hexToNumber(value))\n\t\t\t\t: BigInt(value as number);\n\n\t\treturn valueToCheck >= minSize && valueToCheck <= maxSize;\n\t} catch (error) {\n\t\t// Some invalid number value given which can not be converted via BigInt\n\t\treturn false;\n\t}\n};\n\nexport const isNumber = (value: ValidInputTypes) => {\n\tif (isInt(value)) {\n\t\treturn true;\n\t}\n\n\t// It would be a decimal number\n\tif (\n\t\ttypeof value === 'string' &&\n\t\t/[0-9.]/.test(value) &&\n\t\tvalue.indexOf('.') === value.lastIndexOf('.')\n\t) {\n\t\treturn true;\n\t}\n\n\tif (typeof value === 'number') {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}